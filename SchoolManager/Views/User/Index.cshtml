@model IEnumerable<SchoolManager.Models.User>
@{
    ViewData["Title"] = "Gestión de Usuarios";
    Layout = "_AdminLayout";
}

<style>
    .portal-header {
        background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);
        color: white;
        padding: 2rem 2rem 1.5rem 2rem;
        border-radius: 1rem;
        margin-bottom: 2rem;
        box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1);
    }
    .portal-header h3 {
        margin: 0;
        font-size: 2rem;
        font-weight: 700;
    }
    .portal-header small {
        opacity: 0.9;
        font-size: 1rem;
    }
    .card {
        border-radius: 1rem;
        box-shadow: 0 4px 6px -1px rgba(0,0,0,0.08);
        border: none;
        margin-bottom: 1.5rem;
    }
    .card-header {
        background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);
        color: white;
        border-radius: 1rem 1rem 0 0 !important;
        font-weight: 600;
        font-size: 1.1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    .card-header.bg-light {
        background: #f1f5f9 !important;
        color: #1e293b !important;
    }
    .table-container {
        background: white;
        border-radius: 1rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        padding: 1.5rem;
        margin-bottom: 2rem;
        overflow: hidden;
    }
    .table-responsive {
        border-radius: 0.75rem;
        background: white;
        margin-top: 1rem;
        overflow-x: auto;
        min-height: 400px;
    }
    .table {
        margin-bottom: 0;
        width: 100%;
        font-size: 0.95rem;
        border-collapse: separate;
        border-spacing: 0;
    }
    .table thead th {
        background: #f1f5f9;
        color: #475569;
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.75rem;
        letter-spacing: 0.05em;
        padding: 0.75rem 1rem;
        border-bottom: 2px solid #e2e8f0;
        white-space: nowrap;
    }
    .table tbody tr {
        transition: all 0.2s;
    }
    .table tbody tr:nth-child(even) {
        background-color: #f8fafc;
    }
    .table tbody tr:hover {
        background-color: #f1f5f9;
    }
    .table tbody td {
        padding: 0.75rem 1rem;
        vertical-align: middle;
        border-bottom: 1px solid #e2e8f0;
        color: #334155;
        font-size: 0.875rem;
    }
    .btn-primary, .btn-warning, .btn-info, .btn-danger {
        border-radius: 0.5rem;
        font-weight: 500;
    }
    .badge {
        font-size: 0.75rem;
        font-weight: 500;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
    }
    .badge.bg-success {
        background-color: #10b981 !important;
    }
    .badge.bg-danger {
        background-color: #ef4444 !important;
    }
    .search-bar {
        margin-bottom: 1.5rem;
        position: relative;
    }
    .search-bar input[type="text"] {
        width: 100%;
        padding: 0.75rem 1rem 0.75rem 2.5rem;
        border-radius: 0.75rem;
        border: 1px solid #e2e8f0;
        background-color: white;
        font-size: 0.95rem;
        color: #1e293b;
        transition: all 0.2s;
    }
    .search-bar input[type="text"]:focus {
        outline: none;
        border-color: #2563eb;
        box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
    }
    .search-bar::before {
        content: "";
        position: absolute;
        left: 1rem;
        top: 50%;
        transform: translateY(-50%);
        width: 1rem;
        height: 1rem;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%2364748b'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z'%3E%3C/path%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: center;
        background-size: contain;
        opacity: 0.5;
    }
    .dataTables_wrapper {
        display: flex;
        flex-direction: column;
    }
    .dataTables_wrapper .dataTables_paginate {
        padding: 1.5rem 0 0.5rem 0;
        margin: 0;
        display: flex;
        justify-content: center;
        gap: 0.25rem;
        width: 100%;
        border-top: 1px solid #e2e8f0;
    }
    .dataTables_wrapper .dataTables_paginate .paginate_button {
        padding: 0.5rem 0.75rem;
        margin: 0;
        min-width: 2rem;
        text-align: center;
        border: none;
        background: transparent !important;
        color: #64748b !important;
        font-weight: 500;
        font-size: 0.875rem;
    }
    .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
        background: #f1f5f9 !important;
        color: #2563eb !important;
    }
    .dataTables_wrapper .dataTables_paginate .paginate_button.current {
        background: #2563eb !important;
        color: white !important;
        border-radius: 0.25rem;
    }
    .dataTables_wrapper .dataTables_paginate .paginate_button.disabled {
        opacity: 0.5;
        cursor: not-allowed;
        pointer-events: none;
    }
    .dataTables_wrapper .dataTables_paginate .ellipsis {
        padding: 0.5rem 0.75rem;
        color: #64748b;
    }
    /* Ocultar elementos innecesarios */
    .dataTables_length,
    .dataTables_filter,
    .dataTables_info {
        display: none !important;
    }
    @@media (max-width: 768px) {
        .table thead th,
        .table tbody td {
            min-width: 120px; /* Ancho mínimo para celdas */
        }
        .table thead th:first-child,
        .table tbody td:first-child {
            position: sticky;
            left: 0;
            background: white;
            z-index: 1;
        }
        .table thead th:last-child,
        .table tbody td:last-child {
            position: sticky;
            right: 0;
            background: white;
            z-index: 1;
        }
        .action-buttons {
            white-space: nowrap;
        }
    }
    .action-buttons {
        display: flex;
        gap: 0.3rem;
        justify-content: center;
    }
    .btn-action {
        padding: 0.3rem 0.7rem;
        border-radius: 0.4rem;
        font-weight: 500;
        font-size: 0.85rem;
        display: inline-flex;
        align-items: center;
        gap: 0.4rem;
        transition: all 0.2s;
        color: white;
    }
    .btn-action:hover {
        transform: translateY(-1px);
        color: white;
    }
    .btn-action i {
        font-size: 0.85rem;
    }
    .btn-edit {
        background-color: #2563eb;
        border: none;
    }
    .btn-edit:hover {
        background-color: #1e40af;
    }
    .btn-delete {
        background-color: #ef4444;
        border: none;
    }
    .btn-delete:hover {
        background-color: #dc2626;
    }
    .btn-send-password {
        background-color: #10b981;
        border: none;
    }
    .btn-send-password:hover {
        background-color: #059669;
    }
    .role-text {
        font-weight: 600;
        font-size: 0.875rem;
        padding: 0.25rem 0;
    }
    .role-admin {
        color: #7c3aed;
    }
    .role-teacher {
        color: #0284c7;
    }
    .role-student {
        color: #059669;
    }
    .role-parent {
        color: #d97706;
    }
    .role-director {
        color: #7c3aed;
    }
</style>

<div class="container-fluid">
    <!-- ENCABEZADO AZUL -->
    <div class="portal-header d-flex justify-content-between align-items-center mb-4">
        <div class="d-flex align-items-center gap-2">
            <i class="bi bi-people-fill fs-2 text-white"></i>
            <h3 class="mb-0">Gestión de Usuarios</h3>
        </div>
        <div class="text-end">
            <small>@DateTime.Now.ToString("dddd, dd 'de' MMMM 'de' yyyy")</small>
        </div>
    </div>

    <div class="card card-primary card-outline">
        <div class="card-header">
            <i class="fas fa-user-plus me-2"></i> Crear / Editar Usuario
        </div>
        <div class="card-body">
            <form id="userForm" novalidate>
                @Html.AntiForgeryToken()
                <input type="hidden" name="UserId" id="UserId" />
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Nombre</label>
                            <input type="text" class="form-control" name="Name" placeholder="Nombre" required autocomplete="off">
                            <div class="invalid-feedback">Nombre obligatorio.</div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Apellidos</label>
                            <input type="text" class="form-control" name="LastName" placeholder="Apellidos" autocomplete="off">
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Correo Electrónico</label>
                            <input type="email" class="form-control" name="Email" placeholder="correo@ejemplo.com" required autocomplete="off">
                            <div class="invalid-feedback">Correo obligatorio.</div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Documento de Identidad</label>
                            <input type="text" class="form-control" name="DocumentId" placeholder="Ej. 8-123-4567" autocomplete="off">
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group position-relative">
                            <label>Contraseña</label>
                            <div class="input-group">
                                <input type="password" class="form-control" name="PasswordHash" placeholder="********" autocomplete="new-password" id="userPasswordInput">
                                <button type="button" class="btn btn-outline-secondary" id="toggleUserPassword" style="border: 1px solid #ced4da;">
                                    <i class="fas fa-eye" id="toggleUserIcon"></i>
                                </button>
                                <button type="button" class="btn btn-outline-info" id="generatePassword" title="Generar contraseña temporal">
                                    <i class="fas fa-key"></i>
                                </button>
                            </div>
                            <small class="form-text text-muted" id="passwordInfo" style="display: none;">
                                <i class="fas fa-info-circle"></i> Contraseña generada temporalmente
                            </small>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Fecha de Nacimiento</label>
                            <input type="date" class="form-control" name="DateOfBirth">
                            <div class="invalid-feedback">La fecha de nacimiento es obligatoria.</div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Celular Principal</label>
                            <input type="tel" class="form-control" name="CellphonePrimary" placeholder="+507 1234 5678" autocomplete="off" maxlength="13">
                            <div class="invalid-feedback">Formato de celular inválido.</div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Celular Secundario</label>
                            <input type="tel" class="form-control" name="CellphoneSecondary" placeholder="+507 1234 5678" autocomplete="off" maxlength="13">
                            <div class="invalid-feedback">Formato de celular inválido.</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <label>Rol</label>
                            <select class="form-control" name="Role" id="roleSelect">
                                @foreach (var role in ViewBag.Roles)
                                {
                                    <option value="@role">@GetRoleDisplayName(role)</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <label>Estado</label>
                            <select class="form-control" name="Status">
                                <option value="active">Activo</option>
                                <option value="inactive">Inactivo</option>
                            </select>
                        </div>
                    </div>
                </div>
                <button type="button" id="btnCreateUser" class="btn btn-primary">
                    <i class="fas fa-user-plus"></i> Crear Usuario
                </button>
                <button type="button" id="btnUpdateUser" class="btn btn-warning" disabled>
                    <i class="fas fa-save"></i> Actualizar Usuario
                </button>
            </form>
        </div>
    </div>

    <div class="table-container">
            <div class="search-bar">
            <input type="text" id="searchInput" placeholder="Buscar usuario por nombre, correo o documento...">
            </div>
            <div class="table-responsive">
            <table class="table" id="users-table">
                    <thead>
                        <tr>
                            <th>Nombre</th>
                            <th>Apellidos</th>
                            <th>Correo</th>
                            <th>Fecha de nacimiento</th>
                            <th>Documento</th>
                            <th>Celular Principal</th>
                            <th>Celular Secundario</th>
                            <th>Rol</th>
                            <th>Estado</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                <tbody>
                        @foreach (var user in Model)
                        {
                            <tr>
                            <td>@user.Name</td>
                            <td>@user.LastName</td>
                            <td>@user.Email</td>
                            <td>@(user.DateOfBirth?.ToString("dd/MM/yyyy"))</td>
                            <td>@user.DocumentId</td>
                            <td>@(user.CellphonePrimary ?? "-")</td>
                            <td>@(user.CellphoneSecondary ?? "-")</td>
                            <td>
                                <span class="role-text @GetRoleClass(user.Role?.ToLower())">
                                    @GetRoleDisplayName(user.Role)
                                </span>
                            </td>
                            <td>
                                    @if (user.Status?.ToLowerInvariant() == "active")
                                    {
                                        <span class="badge bg-success">Activo</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger">Inactivo</span>
                                    }
                                </td>
                            <td>
                                <div class="action-buttons">
                                    @if (user.Role?.ToLower() != "admin")
                                    {
                                        <button type="button" class="btn btn-action btn-edit btn-edit-user" data-id="@user.Id" title="Editar">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button type="button" class="btn btn-action btn-delete btn-delete-user" data-id="@user.Id" title="Eliminar">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-action btn-edit" disabled title="No se puede editar usuarios administradores">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button type="button" class="btn btn-action btn-delete" disabled title="No se puede eliminar usuarios administradores">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    }
                                    <button type="button" class="btn btn-action btn-send-password" 
                                            data-id="@user.Id" 
                                            data-name="@user.Name" 
                                            data-email="@user.Email" 
                                            title="Enviar contraseña por email">
                                        <i class="fas fa-envelope"></i>
                                    </button>
                                </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
        </div>
    </div>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://cdn.datatables.net/responsive/2.4.1/css/responsive.dataTables.min.css" />
    <script src="https://cdn.datatables.net/responsive/2.4.1/js/dataTables.responsive.min.js"></script>
    <link rel="stylesheet" href="~/lib/sweetalert2/sweetalert2.min.css" />
    <script src="~/lib/sweetalert2/sweetalert2.min.js"></script>

    <script>
        $(document).ready(function () {
            // Funcionalidad para mostrar/ocultar contraseña en formulario de usuarios
            $('#toggleUserPassword').on('click', function() {
                const passwordInput = $('#userPasswordInput');
                const toggleIcon = $('#toggleUserIcon');
                
                if (passwordInput.attr('type') === 'password') {
                    passwordInput.attr('type', 'text');
                    toggleIcon.removeClass('fa-eye').addClass('fa-eye-slash');
                } else {
                    passwordInput.attr('type', 'password');
                    toggleIcon.removeClass('fa-eye-slash').addClass('fa-eye');
                }
            });

            // Funcionalidad para generar contraseña temporal
            $('#generatePassword').on('click', function() {
                const generatedPassword = generateTemporaryPassword();
                $('#userPasswordInput').val(generatedPassword).attr('type', 'text');
                $('#toggleUserIcon').removeClass('fa-eye').addClass('fa-eye-slash');
                $('#passwordInfo').show();
                
                // Mostrar la contraseña generada en un SweetAlert
                Swal.fire({
                    title: 'Contraseña Generada',
                    html: `
                        <div class="text-center">
                            <p><strong>Contraseña temporal generada:</strong></p>
                            <div class="alert alert-info">
                                <code style="font-size: 1.2rem; font-weight: bold;">${generatedPassword}</code>
                            </div>
                            <p class="text-muted">Esta contraseña se ha copiado al campo de contraseña.</p>
                        </div>
                    `,
                    icon: 'success',
                    confirmButtonText: 'Entendido',
                    allowOutsideClick: false
                });
            });

            // Función para generar contraseña temporal
            function generateTemporaryPassword() {
                const length = 12;
                const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@@" + String.fromCharCode(35) + "$%^&*";
                let password = "";
                
                // Asegurar al menos un carácter de cada tipo
                password += "ABCDEFGHIJKLMNOPQRSTUVWXYZ"[Math.floor(Math.random() * 26)]; // Mayúscula
                password += "abcdefghijklmnopqrstuvwxyz"[Math.floor(Math.random() * 26)]; // Minúscula
                password += "0123456789"[Math.floor(Math.random() * 10)]; // Número
                password += "!@@" + String.fromCharCode(35) + "$%^&*"[Math.floor(Math.random() * 8)]; // Especial
                
                // Completar con caracteres aleatorios
                for (let i = password.length; i < length; i++) {
                    password += charset.charAt(Math.floor(Math.random() * charset.length));
                }
                
                // Mezclar la contraseña
                return password.split('').sort(() => Math.random() - 0.5).join('');
            }

            // Inicializar DataTables en la tabla de usuarios con Responsive
            var usersTable = $('#users-table').DataTable({
                "pageLength": 25,
                "dom": "<'row'<'col-sm-12'tr>><'row'<'col-sm-12'p>>",
                "language": {
                    "paginate": {
                        "first": "«",
                        "last": "»",
                        "next": "›",
                        "previous": "‹"
                    },
                    "zeroRecords": "No se encontraron resultados",
                    "infoEmpty": "",
                    "infoFiltered": "",
                    "info": ""
                },
                "ordering": true,
                "order": [[0, 'asc']],
                "columnDefs": [
                    { "orderable": true, "targets": [0,1,2,3,4,5,6] },
                    { "orderable": false, "targets": 7 }
                ],
                "responsive": {
                    details: {
                        display: $.fn.dataTable.Responsive.display.childRow,
                        type: 'column',
                        renderer: function (api, rowIdx, columns) {
                            var data = $.map(columns, function (col, i) {
                                return col.hidden ?
                                    '<tr data-dt-row="' + col.rowIndex + '" data-dt-column="' + col.columnIndex + '">' +
                                    '<td>' + col.title + ':' + '</td> ' +
                                    '<td>' + col.data + '</td>' +
                                    '</tr>' :
                                    '';
                            }).join('');

                            return data ?
                                $('<table/>').append(data) :
                                false;
                        }
                    }
                }
            });

            // Conectar el input de búsqueda personalizado con DataTables
            $('#searchInput').on('keyup', function () {
                usersTable.search(this.value).draw();
            });

            // Usar delegación de eventos para los botones de editar y eliminar
            $(document).on('click', '.btn-edit-user', function() {
                const userId = $(this).data('id');

                $.get(`/User/GetUserJson?id=${userId}`, function (user) {
                    $('#UserId').val(user.id);
                    $('[name="Name"]').val(user.name);
                    $('[name="LastName"]').val(user.lastName);
                    $('[name="Email"]').val(user.email);
                    $('[name="DocumentId"]').val(user.documentId);
                    
                    // Mostrar información sobre contraseñas hasheadas
                    $('[name="PasswordHash"]').val('').attr('placeholder', 'Dejar vacío para mantener la contraseña actual');
                    $('#passwordInfo').html('<i class="fas fa-shield-alt text-warning"></i> Las contraseñas están protegidas con hash. Use el botón <i class="fas fa-key"></i> para generar una nueva.').show();
                    
                    $('[name="Role"]').val(user.role);
                    $('[name="Status"]').val(user.status);
                    $('[name="DateOfBirth"]').val(user.dateOfBirth ? user.dateOfBirth.split('T')[0] : '');
                    $('[name="CellphonePrimary"]').val(user.cellphonePrimary || '');
                    $('[name="CellphoneSecondary"]').val(user.cellphoneSecondary || '');

                    // Cambiar el tipo de input a password cuando se edita
                    $('#userPasswordInput').attr('type', 'password');
                    $('#toggleUserIcon').removeClass('fa-eye-slash').addClass('fa-eye');

                    $('#btnUpdateUser').prop('disabled', false);
                    $('#btnCreateUser').prop('disabled', true);
                });
            });

            $(document).on('click', '.btn-delete-user', function() {
                const userId = $(this).data('id');
                const userName = $(this).closest('tr').find('td:first').text();

                Swal.fire({
                    title: `¿Eliminar a "${userName}"?`,
                    text: "Esta acción no se puede deshacer.",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Sí, eliminar',
                    cancelButtonText: 'Cancelar'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: `/User/DeleteConfirmed/${userId}`,
                            type: 'POST'
                        })
                        .done(function () {
                            Swal.fire('Eliminado', 'Usuario eliminado correctamente', 'success')
                                .then(() => location.reload());
                        })
                        .fail(function (xhr) {
                            const message = xhr.responseJSON?.message || xhr.responseText || 'Error inesperado';
                            Swal.fire('Error', message, 'error');
                        });
                    }
                });
            });

            // Funcionalidad para enviar contraseña por email
            $(document).on('click', '.btn-send-password', function() {
                const userId = $(this).data('id');
                const userName = $(this).data('name');
                const userEmail = $(this).data('email');
                const btn = $(this);

                Swal.fire({
                    title: `¿Enviar contraseña a "${userName}"?`,
                    text: `Se enviará un email con la contraseña a: ${userEmail}`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#10b981',
                    cancelButtonColor: '#6b7280',
                    confirmButtonText: 'Sí, enviar',
                    cancelButtonText: 'Cancelar'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Mostrar loading
                        btn.html('<i class="fas fa-spinner fa-spin"></i>').prop('disabled', true);
                        
                        $.ajax({
                            url: `/User/SendPasswordEmail/${userId}`,
                            type: 'POST',
                            headers: {
                                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                            }
                        })
                        .done(function (response) {
                            Swal.fire({
                                icon: 'success',
                                title: '¡Email enviado!',
                                text: response.message || 'La contraseña se ha enviado exitosamente al usuario.',
                                confirmButtonColor: '#10b981',
                                confirmButtonText: '¡Perfecto!'
                            });
                        })
                        .fail(function (xhr) {
                            const message = xhr.responseJSON?.message || xhr.responseText || 'Error al enviar el email';
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: message,
                                confirmButtonColor: '#ef4444',
                                confirmButtonText: 'Entendido'
                            });
                        })
                        .always(function() {
                            // Restaurar botón
                            btn.html('<i class="fas fa-envelope"></i>').prop('disabled', false);
                        });
                    }
                });
            });

            function showValidationErrors(user) {
                const form = $('#userForm');
                form.find('input, select').removeClass('is-invalid');
                if (!user.Name) form.find('[name="Name"]').addClass('is-invalid');
                if (!user.Email) form.find('[name="Email"]').addClass('is-invalid');
            }

            $('#btnCreateUser').on('click', function () {
                const form = $('#userForm');
                const user = {
                    Name: form.find('[name="Name"]').val().trim(),
                    LastName: form.find('[name="LastName"]').val().trim(),
                    Email: form.find('[name="Email"]').val().trim(),
                    DocumentId: form.find('[name="DocumentId"]').val().trim(),
                    PasswordHash: form.find('[name="PasswordHash"]').val(),
                    Role: form.find('[name="Role"]').val(),
                    Status: form.find('[name="Status"]').val(),
                    DateOfBirth: form.find('[name="DateOfBirth"]').val() || null,
                    CellphonePrimary: form.find('[name="CellphonePrimary"]').val() || null,
                    CellphoneSecondary: form.find('[name="CellphoneSecondary"]').val() || null
                };
                
                // LOGS PARA DEBUGGING DE CELULARES - CREATE
                console.log('=== FRONTEND - CREATE USER - CAPTURA DE CELULARES ===');
                console.log('CellphonePrimary input value:', form.find('[name="CellphonePrimary"]').val());
                console.log('CellphoneSecondary input value:', form.find('[name="CellphoneSecondary"]').val());
                console.log('CellphonePrimary en objeto user:', user.CellphonePrimary);
                console.log('CellphoneSecondary en objeto user:', user.CellphoneSecondary);
                console.log('Objeto user completo:', user);

                showValidationErrors(user);
                if (!user.Name || !user.Email) return;

                $.ajax({
                    url: '/User/CreateJson',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(user)
                })
                .done(function (response) {
                    Swal.fire({
                        icon: 'success',
                        title: '¡Usuario Creado!',
                        text: response.message || 'El usuario se ha creado exitosamente en el sistema',
                        confirmButtonColor: '#10b981',
                        confirmButtonText: '¡Excelente!'
                    }).then(() => {
                        resetUserForm();
                        location.reload();
                    });
                })
                .fail(function (xhr) {
                    let message = 'Ha ocurrido un error inesperado. Por favor, inténtalo de nuevo.';
                    
                    if (xhr.responseJSON?.message) {
                        message = xhr.responseJSON.message;
                    } else if (xhr.responseText) {
                        // Verificar si el error contiene información sobre DNI duplicado
                        if (xhr.responseText.toLowerCase().includes('document') || 
                            xhr.responseText.toLowerCase().includes('dni') || 
                            xhr.responseText.toLowerCase().includes('cedula') ||
                            xhr.responseText.toLowerCase().includes('duplicate') ||
                            xhr.responseText.toLowerCase().includes('ya existe')) {
                            message = '⚠️ El número de documento (DNI) ya está registrado en el sistema. Por favor, verifica que el documento sea único o contacta al administrador si necesitas ayuda.';
                        } else if (xhr.responseText.toLowerCase().includes('email') || 
                                   xhr.responseText.toLowerCase().includes('correo')) {
                            message = '📧 El correo electrónico ya está registrado en el sistema. Por favor, utiliza un correo diferente.';
                        }
                    }
                    
                    Swal.fire({
                        icon: 'warning',
                        title: 'No se pudo crear el usuario',
                        text: message,
                        confirmButtonColor: '#ef4444',
                        confirmButtonText: 'Entendido'
                    });
                });
            });

            $('#btnUpdateUser').on('click', function () {
                const form = $('#userForm');
                const passwordValue = form.find('[name="PasswordHash"]').val().trim();
                const user = {
                    Id: $('#UserId').val(),
                    Name: form.find('[name="Name"]').val().trim(),
                    LastName: form.find('[name="LastName"]').val().trim(),
                    Email: form.find('[name="Email"]').val().trim(),
                    DocumentId: form.find('[name="DocumentId"]').val().trim(),
                    PasswordHash: passwordValue || null, // Solo enviar si hay valor
                    Role: form.find('[name="Role"]').val(),
                    Status: form.find('[name="Status"]').val(),
                    DateOfBirth: form.find('[name="DateOfBirth"]').val() || null,
                    CellphonePrimary: form.find('[name="CellphonePrimary"]').val() || null,
                    CellphoneSecondary: form.find('[name="CellphoneSecondary"]').val() || null
                };
                
                // LOGS PARA DEBUGGING DE CELULARES - UPDATE
                console.log('=== FRONTEND - UPDATE USER - CAPTURA DE CELULARES ===');
                console.log('CellphonePrimary input value:', form.find('[name="CellphonePrimary"]').val());
                console.log('CellphoneSecondary input value:', form.find('[name="CellphoneSecondary"]').val());
                console.log('CellphonePrimary en objeto user:', user.CellphonePrimary);
                console.log('CellphoneSecondary en objeto user:', user.CellphoneSecondary);
                console.log('Objeto user completo:', user);

                showValidationErrors(user);
                if (!user.Name || !user.Email) return;

                $.ajax({
                    url: '/User/UpdateJson',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(user)
                })
                .done(function (response) {
                    Swal.fire({
                        icon: 'success',
                        title: '¡Usuario Actualizado!',
                        text: response.message || 'Los datos del usuario se han actualizado correctamente',
                        confirmButtonColor: '#10b981',
                        confirmButtonText: '¡Perfecto!'
                    }).then(() => {
                        resetUserForm();
                        location.reload();
                    });
                })
                .fail(function (xhr) {
                    let message = 'Ha ocurrido un error inesperado. Por favor, inténtalo de nuevo.';
                    
                    if (xhr.responseJSON?.message) {
                        message = xhr.responseJSON.message;
                    } else if (xhr.responseText) {
                        // Verificar si el error contiene información sobre DNI duplicado
                        if (xhr.responseText.toLowerCase().includes('document') || 
                            xhr.responseText.toLowerCase().includes('dni') || 
                            xhr.responseText.toLowerCase().includes('cedula') ||
                            xhr.responseText.toLowerCase().includes('duplicate') ||
                            xhr.responseText.toLowerCase().includes('ya existe')) {
                            message = '⚠️ El número de documento (DNI) ya está registrado en el sistema. Por favor, verifica que el documento sea único o contacta al administrador si necesitas ayuda.';
                        } else if (xhr.responseText.toLowerCase().includes('email') || 
                                   xhr.responseText.toLowerCase().includes('correo')) {
                            message = '📧 El correo electrónico ya está registrado en el sistema. Por favor, utiliza un correo diferente.';
                        }
                    }
                    
                    Swal.fire({
                        icon: 'warning',
                        title: 'No se pudo actualizar el usuario',
                        text: message,
                        confirmButtonColor: '#ef4444',
                        confirmButtonText: 'Entendido'
                    });
                });
            });

            function resetUserForm() {
                const form = $('#userForm');
                form[0].reset();
                $('#UserId').val('');
                // Restaurar el placeholder original y tipo de input
                $('[name="PasswordHash"]').attr('placeholder', '********');
                $('#userPasswordInput').attr('type', 'password');
                $('#toggleUserIcon').removeClass('fa-eye-slash').addClass('fa-eye');
                $('#passwordInfo').hide(); // Ocultar mensaje informativo
                // Limpiar campos de celular
                $('[name="CellphonePrimary"]').val('');
                $('[name="CellphoneSecondary"]').val('');
                $('#btnUpdateUser').prop('disabled', true);
                $('#btnCreateUser').prop('disabled', false);
                form.find('input, select').removeClass('is-invalid');
            }
        });
        
        // Formatear números de celular con código de Panamá
        function formatPhoneNumbers() {
            $('input[name="CellphonePrimary"], input[name="CellphoneSecondary"]').on('input', function() {
                let value = $(this).val().replace(/\D/g, ''); // Solo números
                
                // Si no empieza con 507, agregarlo automáticamente
                if (value.length > 0 && !value.startsWith('507')) {
                    value = '507' + value;
                }
                
                // Limitar a 11 dígitos (507 + 8 dígitos)
                if (value.length > 11) {
                    value = value.substring(0, 11);
                }
                
                // Formatear: +507 XXXX XXXX
                if (value.length >= 3) {
                    let formatted = '+' + value.substring(0, 3);
                    if (value.length > 3) {
                        formatted += ' ' + value.substring(3, 7);
                    }
                    if (value.length > 7) {
                        formatted += ' ' + value.substring(7);
                    }
                    $(this).val(formatted);
                } else if (value.length > 0) {
                    $(this).val('+' + value);
                }
            });
            
            // Manejar el evento de pegar
            $('input[name="CellphonePrimary"], input[name="CellphoneSecondary"]').on('paste', function(e) {
                setTimeout(() => {
                    let value = $(this).val().replace(/\D/g, '');
                    if (value.length > 0 && !value.startsWith('507')) {
                        value = '507' + value;
                    }
                    if (value.length > 11) {
                        value = value.substring(0, 11);
                    }
                    
                    if (value.length >= 3) {
                        let formatted = '+' + value.substring(0, 3);
                        if (value.length > 3) {
                            formatted += ' ' + value.substring(3, 7);
                        }
                        if (value.length > 7) {
                            formatted += ' ' + value.substring(7);
                        }
                        $(this).val(formatted);
                    }
                }, 10);
            });
        }
        
        // Inicializar formateo de teléfonos
        formatPhoneNumbers();
    </script>
}

@functions {
    private string GetRoleClass(string role)
    {
        return role?.ToLower() switch
        {
            "admin" => "role-admin",
            "teacher" => "role-teacher",
            "student" => "role-student",
            "estudiante" => "role-student",
            "parent" => "role-parent",
            "director" => "role-director",
            "superadmin" => "role-admin",
            _ => ""
        };
    }

    private string GetRoleDisplayName(string role)
    {
        return role?.ToLower() switch
        {
            "admin" => "Administrador",
            "superadmin" => "Super Administrador",
            "teacher" => "Docente",
            "student" => "Estudiante",
            "estudiante" => "Estudiante",
            "parent" => "Padre/Madre",
            "director" => "Director",
            _ => role ?? "Sin rol"
        };
    }
}