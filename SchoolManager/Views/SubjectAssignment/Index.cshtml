@model IEnumerable<SchoolManager.Models.ViewModels.SubjectAssignmentViewModel>

@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "Catálogo de Materias";
}

<style>
    .portal-header {
        background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);
        color: white;
        padding: 2rem 2rem 1.5rem 2rem;
        border-radius: 1rem;
        margin-bottom: 2rem;
        box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1);
    }
    .portal-header h3 {
        margin: 0;
        font-size: 2rem;
        font-weight: 700;
    }
    .portal-header small {
        opacity: 0.9;
        font-size: 1rem;
    }
    .card {
        border-radius: 1rem;
        box-shadow: 0 4px 6px -1px rgba(0,0,0,0.08);
        border: none;
        margin-bottom: 1.5rem;
    }
    .card-header {
        background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);
        color: white;
        border-radius: 1rem 1rem 0 0 !important;
        font-weight: 600;
        font-size: 1.1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    .table {
        border-radius: 0.5rem;
        overflow: hidden;
        margin-bottom: 0;
    }
    .table thead th {
        background-color: #f8fafc;
        border-bottom: 2px solid #e2e8f0;
        text-align: center;
        vertical-align: middle;
        font-weight: 600;
    }
    .table tbody td {
        text-align: center;
        vertical-align: middle;
    }
    .btn-primary, .btn-danger, .btn-success {
        border-radius: 0.5rem;
        font-weight: 500;
    }
    .badge {
        font-size: 1em;
        border-radius: 0.5rem;
        padding: 0.5em 1em;
    }
    .search-bar {
        margin-bottom: 1rem;
    }
    .search-bar input {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 1px solid #e2e8f0;
        border-radius: 0.5rem;
        font-size: 0.95rem;
        transition: all 0.3s ease;
        background-color: #f8fafc;
    }
    .search-bar input:focus {
        outline: none;
        border-color: #2563eb;
        box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
    }
    .search-bar input::placeholder {
        color: #94a3b8;
    }
    .dataTables_filter {
        display: none;
    }
    .dataTables_length {
        display: none;
    }
    .dataTables_info {
        display: none;
    }
</style>

<div class="container-fluid">
    <!-- ENCABEZADO AZUL -->
    <div class="portal-header d-flex justify-content-between align-items-center mb-4">
        <div class="d-flex align-items-center gap-2">
            <i class="bi bi-journal-bookmark-fill fs-2 text-white"></i>
            <h3 class="mb-0">Catálogo de Materias</h3>
        </div>
        <div class="text-end">
            <small>@DateTime.Now.ToString("dddd, dd 'de' MMMM 'de' yyyy")</small>
        </div>
    </div>

    <div class="card card-primary card-outline">
        <div class="card-header d-flex justify-content-between align-items-center">
            <div>
                <i class="bi bi-journal-bookmark-fill me-2"></i> Asignaciones Actuales
            </div>
            <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#createModal">
                <i class="bi bi-plus-circle me-2"></i> Crear Asignación
            </button>
        </div>
        <!-- Barra de búsqueda -->
        <div class="search-bar d-flex justify-content-center align-items-center" style="margin-top: 1rem; margin-bottom: 1rem;">
            <div class="input-group" style="max-width: 500px; width: 100%;">
                <span class="input-group-text bg-white border-end-0"><i class="bi bi-search"></i></span>
                <input type="text" id="searchAssignments" class="form-control border-start-0" placeholder="Buscar asignaciones..." autocomplete="off">
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover align-middle text-center" id="asignacionTable">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Especialidad</th>
                            <th>Área</th>
                            <th>Materia</th>
                            <th>Estado</th>
                            <th>Grado</th>
                            <th>Grupo</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{ int i = 1; foreach (var item in Model) {
                            <tr data-assignment-id="@item.Id">
                                <td>@i</td>
                                <td class="text-start">@item.SpecialtyName</td>
                                <td class="text-start">@item.AreaName</td>
                                <td class="text-start">@item.SubjectName</td>
                                <td>
                                    <span class="badge @(item.Status == "Active" ? "bg-success" : "bg-danger")">
                                        @(item.Status == "Active" ? "Activo" : "Inactivo")
                                    </span>
                                </td>
                                <td>@item.GradeLevelName</td>
                                <td>@item.GroupName</td>
                                <td class="d-flex justify-content-start align-items-center">
                                    <button type="button" class="btn btn-sm btn-primary me-2" data-bs-toggle="modal" data-bs-target="#editModal"
                                            data-assignment-id="@item.Id"
                                            data-specialty-name="@item.SpecialtyName"
                                            data-area-name="@item.AreaName"
                                            data-subject-name="@item.SubjectName"
                                            data-grade-name="@item.GradeLevelName"
                                            data-group-name="@item.GroupName">
                                        <i class="bi bi-pencil-square"></i> Editar
                                    </button>
                                    <a href="@Url.Action("ChangeStatus", new { id = item.Id })" class="btn btn-sm @(item.Status == "Active" ? "btn-danger" : "btn-success")">
                                        <i class="bi @(item.Status == "Active" ? "bi-pause-circle" : "bi-play-circle")"></i>
                                        @(item.Status == "Active" ? "Desactivar" : "Activar")
                                    </a>
                                    <button type="button" class="btn btn-sm btn-danger btn-delete-assignment ms-2" data-assignment-id="@item.Id">
                                        <i class="bi bi-trash"></i> Eliminar
                                    </button>
                                </td>
                            </tr>
                            i++;
                        } }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Edición -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content shadow">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="editModalLabel">Editar Asignación</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editAssignmentForm">
                    <div class="mb-3">
                        <label for="specialtyId" class="form-label">Especialidad</label>
                        <select class="form-control" id="specialtyId" name="SpecialtyId">
                            <option value="">Seleccione una especialidad</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="areaId" class="form-label">Área</label>
                        <select class="form-control" id="areaId" name="AreaId">
                            <option value="">Seleccione un área</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="subjectId" class="form-label">Materia</label>
                        <select class="form-control" id="subjectId" name="SubjectId">
                            <option value="">Seleccione una materia</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="gradeLevelId" class="form-label">Grado</label>
                        <select class="form-control" id="gradeLevelId" name="GradeLevelId">
                            <option value="">Seleccione un grado</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="groupId" class="form-label">Grupo</label>
                        <select class="form-control" id="groupId" name="GroupId">
                            <option value="">Seleccione un grupo</option>
                        </select>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                        <button type="button" class="btn btn-success" id="btnSaveChanges">Guardar Cambios</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Creación -->
<div class="modal fade" id="createModal" tabindex="-1" aria-labelledby="createModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content shadow">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="createModalLabel">Crear Nueva Asignación</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createAssignmentForm">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="createSpecialtyId" class="form-label">Especialidad</label>
                                <select class="form-control" id="createSpecialtyId" name="SpecialtyId" required>
                                    <option value="">Seleccione una especialidad</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="createAreaId" class="form-label">Área</label>
                                <select class="form-control" id="createAreaId" name="AreaId" required>
                                    <option value="">Seleccione un área</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="createSubjectId" class="form-label">Materia</label>
                                <select class="form-control" id="createSubjectId" name="SubjectId" required>
                                    <option value="">Seleccione una materia</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="createGradeLevelId" class="form-label">Grado</label>
                                <select class="form-control" id="createGradeLevelId" name="GradeLevelId" required>
                                    <option value="">Seleccione un grado</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="createGroupId" class="form-label">Grupo</label>
                                <select class="form-control" id="createGroupId" name="GroupId" required>
                                    <option value="">Seleccione un grupo</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                        <button type="button" class="btn btn-success" id="btnCreateAssignment">Crear Asignación</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        /*----------------------------------
          DataTable
        ----------------------------------*/
        $(function () {
            const table = $('#asignacionTable').DataTable({
                dom: '<"search-bar"f>rt<"row"<"col-sm-12"p>>',
                language: {
                    search: "",
                    paginate: {
                        first: "«",
                        last: "»",
                        next: "›",
                        previous: "‹"
                    },
                    zeroRecords: "No se encontraron registros"
                },
                pageLength: 25,
                responsive: true,
                ordering: false
            });

            // Personalizar el input de búsqueda
            $('.dataTables_filter input')
                .attr('placeholder', 'Buscar asignación por nombre, código o descripción...')
                .addClass('form-control');
        });

        /*----------------------------------
          Variables globales
        ----------------------------------*/
        let currentAssignmentId = null;

        /*----------------------------------
          Cargar asignación actual
        ----------------------------------*/
        $('#editModal').on('show.bs.modal', function (e) {
            const btn = $(e.relatedTarget);
            currentAssignmentId = btn.data('assignment-id');

            // Cargar datos de dropdowns y luego cargar la asignación actual
            $.get('@Url.Action("GetDropdownData", "SubjectAssignment")', function(response) {
                if (response.success) {
                    // Poblar dropdowns con todos los datos disponibles
                    $('#specialtyId').html('<option value="">Seleccione una especialidad</option>' + 
                        response.specialties.map(s => `<option value="${s.id}">${s.name}</option>`).join(''));
                    $('#areaId').html('<option value="">Seleccione un área</option>' + 
                        response.areas.map(a => `<option value="${a.id}">${a.name}</option>`).join(''));
                    $('#subjectId').html('<option value="">Seleccione una materia</option>' + 
                        response.subjects.map(s => `<option value="${s.id}">${s.name}</option>`).join(''));
                    $('#gradeLevelId').html('<option value="">Seleccione un grado</option>' + 
                        response.gradeLevels.map(g => `<option value="${g.id}">${g.name}</option>`).join(''));
                    $('#groupId').html('<option value="">Seleccione un grupo</option>' + 
                        response.groups.map(g => `<option value="${g.id}">${g.name}</option>`).join(''));

                    // Ahora cargar los valores actuales de la asignación
                    loadCurrentAssignmentValues(currentAssignmentId);
                } else {
                    Swal.fire('Error', response.message, 'error');
                }
            });
        });

        // Función para cargar los valores actuales de la asignación
        function loadCurrentAssignmentValues(assignmentId) {
            // Obtener los datos actuales de la asignación desde la tabla
            const row = $(`tr[data-assignment-id="${assignmentId}"]`);
            if (row.length > 0) {
                const specialtyName = row.find('td:eq(1)').text().trim();
                const areaName = row.find('td:eq(2)').text().trim();
                const subjectName = row.find('td:eq(3)').text().trim();
                const gradeLevelName = row.find('td:eq(5)').text().trim();
                const groupName = row.find('td:eq(6)').text().trim();

                // Seleccionar los valores correctos en los dropdowns
                $('#specialtyId option').each(function() {
                    if ($(this).text().trim() === specialtyName) {
                        $(this).prop('selected', true);
                    }
                });

                $('#areaId option').each(function() {
                    if ($(this).text().trim() === areaName) {
                        $(this).prop('selected', true);
                    }
                });

                $('#subjectId option').each(function() {
                    if ($(this).text().trim() === subjectName) {
                        $(this).prop('selected', true);
                    }
                });

                $('#gradeLevelId option').each(function() {
                    if ($(this).text().trim() === gradeLevelName) {
                        $(this).prop('selected', true);
                    }
                });

                $('#groupId option').each(function() {
                    if ($(this).text().trim() === groupName) {
                        $(this).prop('selected', true);
                    }
                });
            }
        }

        /*----------------------------------
          Cascada para el modal de editar (opcional - mantener todos los datos disponibles)
        ----------------------------------*/
        // Los dropdowns del modal de editar mantienen todos los datos disponibles
        // No necesitamos cascada porque todos los datos están cargados

                    /*----------------------------------
                      Guardar cambios
                    ----------------------------------*/
        $('#btnSaveChanges').on('click', function() {
                   const formData = {
            Id: currentAssignmentId, // debe ser un Guid correcto, no vacío
            SpecialtyId: $('#specialtyId').val() || null,
            AreaId: $('#areaId').val() || null,
            SubjectId: $('#subjectId').val() || null,
            GradeLevelId: $('#gradeLevelId').val() || null,
            GroupId: $('#groupId').val() || null
           };

             $.ajax({
                url: '@Url.Action("Edit", "SubjectAssignment")',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(formData),
                success: function(response) {
                    if (response.success) {
                        Swal.fire('Éxito', response.message, 'success').then(() => location.reload());
                    } else {
                        Swal.fire({
                            text: response.message,
                            showCancelButton: false,
                            confirmButtonText: 'Aceptar',
                            showConfirmButton: true,
                            icon: 'error',
                            customClass: {
                                title: 'd-none'
                            }
                        });
                    }
                },
                    error: function(xhr) {
                        let errorMessage = 'No se pudieron guardar los cambios';

                        // Si el servidor devuelve algún mensaje en el cuerpo
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }

                        Swal.fire({
                            text: errorMessage,
                            showCancelButton: false,
                            confirmButtonText: 'Aceptar',
                            showConfirmButton: true,
                            icon: 'error',
                            customClass: {
                                title: 'd-none'
                            }
                        });
                    }
             });

        });

        /*----------------------------------
          Funcionalidad de Creación
        ----------------------------------*/
        
        // Cargar datos de dropdowns al abrir el modal de creación
        $('#createModal').on('show.bs.modal', function (e) {
            // Limpiar formulario
            $('#createAssignmentForm')[0].reset();
            
            // Cargar datos de dropdowns
            $.get('@Url.Action("GetDropdownData", "SubjectAssignment")', function(response) {
                if (response.success) {
                    // Poblar dropdowns
                    $('#createSpecialtyId').html('<option value="">Seleccione una especialidad</option>' + 
                        response.specialties.map(s => `<option value="${s.id}">${s.name}</option>`).join(''));
                    $('#createAreaId').html('<option value="">Seleccione un área</option>' + 
                        response.areas.map(a => `<option value="${a.id}">${a.name}</option>`).join(''));
                    $('#createSubjectId').html('<option value="">Seleccione una materia</option>' + 
                        response.subjects.map(s => `<option value="${s.id}">${s.name}</option>`).join(''));
                    $('#createGradeLevelId').html('<option value="">Seleccione un grado</option>' + 
                        response.gradeLevels.map(g => `<option value="${g.id}">${g.name}</option>`).join(''));
                    $('#createGroupId').html('<option value="">Seleccione un grupo</option>' + 
                        response.groups.map(g => `<option value="${g.id}">${g.name}</option>`).join(''));
                } else {
                    Swal.fire('Error', response.message, 'error');
                }
            });
        });

        // Crear asignación
        $('#btnCreateAssignment').on('click', function() {
            const formData = {
                SpecialtyId: $('#createSpecialtyId').val(),
                AreaId: $('#createAreaId').val(),
                SubjectId: $('#createSubjectId').val(),
                GradeLevelId: $('#createGradeLevelId').val(),
                GroupId: $('#createGroupId').val()
            };

            // Validar que todos los campos estén llenos
            if (!formData.SpecialtyId || !formData.AreaId || !formData.SubjectId || 
                !formData.GradeLevelId || !formData.GroupId) {
                Swal.fire({
                    text: 'Por favor complete todos los campos',
                    showCancelButton: false,
                    confirmButtonText: 'Aceptar',
                    showConfirmButton: true,
                    icon: 'warning',
                    customClass: {
                        title: 'd-none'
                    }
                });
                return;
            }

            // Mostrar loading
            Swal.fire({
                title: 'Creando asignación...',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            $.ajax({
                url: '@Url.Action("Create", "SubjectAssignment")',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(formData),
                success: function(response) {
                    if (response.success) {
                        Swal.fire({
                            text: response.message,
                            showCancelButton: false,
                            confirmButtonText: 'Aceptar',
                            showConfirmButton: true,
                            icon: 'success',
                            customClass: {
                                title: 'd-none'
                            }
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            text: response.message,
                            showCancelButton: false,
                            confirmButtonText: 'Aceptar',
                            showConfirmButton: true,
                            icon: 'error',
                            customClass: {
                                title: 'd-none'
                            }
                        });
                    }
                },
                error: function(xhr) {
                    let errorMessage = 'No se pudo crear la asignación';

                    if (xhr.responseJSON && xhr.responseJSON.message) {
                        errorMessage = xhr.responseJSON.message;
                    }

                    Swal.fire({
                        text: errorMessage,
                        showCancelButton: false,
                        confirmButtonText: 'Aceptar',
                        showConfirmButton: true,
                        icon: 'error',
                        customClass: {
                            title: 'd-none'
                        }
                    });
                }
            });
        });
    </script>
    <script>
        $(document).on('click', '.btn-delete-assignment', function () {
            var assignmentId = $(this).data('assignment-id');
            showConfirm('¿Está seguro de que desea eliminar esta asignación del catálogo de materias?', function () {
                $.ajax({
                    url: '@Url.Action("DeleteAssignment", "SubjectAssignment")', // Corrected URL to use Razor
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(assignmentId),
                    success: function (response) {
                        if (response.success) {
                            showSuccess(response.message);
                            // Eliminar la fila de la tabla
                            $('tr[data-assignment-id="' + assignmentId + '"]').fadeOut(400, function () { $(this).remove(); });
                        } else {
                            showError(response.message);
                        }
                    },
                    error: function () {
                        showError('Ocurrió un error al intentar eliminar la asignación.');
                    }
                });
            });
        });
    </script>
    <script>
        // Filtro de búsqueda en la tabla de asignaciones
        $(document).on('input', '#searchAssignments', function () {
            var value = $(this).val().toLowerCase();
            $('#asignacionTable tbody tr').filter(function () {
                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
            });
        });
    </script>
}



